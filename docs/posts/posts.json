[
  {
    "path": "posts/2022-05-14-ikinciders/",
    "title": "2. Ders - Veri Yapıları",
    "description": {},
    "author": [
      {
        "name": "Arif Yasin Kavdır",
        "url": {}
      }
    ],
    "date": "2022-05-14",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nConsole ve kod çalıştırma\r\nDeğişken\r\nnedir?\r\nOperatörler\r\nMantıksal Operatörler\r\n\r\nVeri tipleri\r\nVektör, DataFrame ve Liste\r\nVektörler\r\nDataframe\r\nListe ve Veri alt\r\nkümelerine ulaşım\r\n\r\n%>%\r\nVeri\r\nokuma ve yazma\r\n\r\nBu derste kullanılan veriye linkinden\r\nulaşabilirsiniz.\r\nR cheatsheetleri için bu linki\r\nkullanabilirsiniz.\r\nConsole ve kod çalıştırma\r\nDeğişken nedir?\r\nKahve örneği\r\nDeğişkene bir değer atamak için “<-” ifadesi kullanılır.\r\nWindows’ta “Alt” + “-” tuşlarına Mac içinse “Option” + “-” tuşlarına\r\naynı anda basarak bu ifadeyi koyabilirsiniz. Aynı zamanda “<” ve “-”\r\nkarakterlerini ayrı ayrı da yazabilirsiniz.\r\n\r\n\r\ncay_kasigi <- \"kahve\"\r\n\r\nseker_kasigi <- \"şeker\"\r\n\r\nbardak <- \"süt\"\r\n\r\n\r\n\r\nBu fonksiyon kurgusunu şimdi anlamanıza gerek bulunmamaktadır. İlerki\r\nderslerde fonksiyon yapılarına daha detaylı bakacağız.\r\n\r\n\r\nkahve_makinesi <- function(a,b,c) {\r\n  paste0(c,\"lü \", \"ve \", b, \"li \", a)\r\n}\r\n\r\n\r\n\r\nBir fonksiyonun çıktısı bir değişkene atanabilir. Fonksiyonların\r\niçerisinde değişkenler kullanılabilir.\r\n\r\n\r\nkahve_makinesi(cay_kasigi, seker_kasigi,bardak)\r\n\r\nkupa <- kahve_makinesi(cay_kasigi, seker_kasigi,bardak)\r\n\r\nkupa\r\n\r\n\r\n\r\nOperatörler\r\nToplama, çıkarma, bölme ve çarpma operatörleri hem sayılarla hem de\r\nnumeric değişkenlerle kullanılabilir.\r\n\r\n\r\n50 + 10\r\n\r\nx <- 50\r\ny <- 10\r\n\r\nx + y\r\n\r\nx - y\r\n\r\nx / y\r\n\r\nx * y\r\n\r\n\r\n\r\n“**” ifadesiyle bir değerin karesi alınabilir.\r\n\r\n\r\nx ** 2\r\n\r\n\r\n\r\n“**” ifadesiyle 0.5’in karesini almak değerin kare kökünü verir.\r\n\r\n\r\nx ** (0.5)\r\n\r\n\r\n\r\nBir değişkenin değeri sonradan değiştirilebilir.\r\n\r\n\r\ny <- 9\r\n\r\n\r\n\r\n“%%” ifadesi bir sayının diğerine bölümünden kalanı verirken “%/%”\r\nifadesi kalansız bölümü vermektedir.\r\n\r\n\r\nx %% y\r\n\r\nx %/% y\r\n\r\n\r\n\r\nMantıksal Operatörler\r\n“==” mantıksal operatörü iki değerin birbirine eşit olup olmadığını\r\nkontrol eder. TRUE sonucu almak iki değerin eşit kabul edildiğini\r\ngösterirken FALSE sonucu almak iki değerin eşit kabul edilmediğini\r\ngösterir.\r\n\r\n\r\n1 == 1\r\n\r\n\"Ahmet\" == \"Ahmet\"\r\n\r\n\"Ahmet\" == 1\r\n\r\n\r\n\r\n“>” mantıksal operatörü ilk değerin ikinci değerden büyük olup\r\nolmadığına bakarken “<” mantıksal operatörü ilk değerin ikinci\r\ndeğerden küçük olup olmadığını kontrol eder.\r\n\r\n\r\n1 > 0\r\n\r\n1 < 0\r\n\r\n\r\n\r\n“>=” mantıksal operatörü ilk değerin ikinci değerden büyük ya da\r\neşit olup olmadığına bakarken “<” mantıksal operatörü ilk değerin\r\nikinci değerden küçük ya da eşit olup olmadığını kontrol eder.\r\n\r\n\r\n1 <= 0\r\n\r\n1 >= 0\r\n\r\n\r\n\r\nVeri tipleri\r\ncharacter, numeric/double, logical\r\nİki tırnak arasında gösterilen karaterler “character” veri\r\ntipindedirler.\r\n\r\n\r\ntypeof(\"şeker\")\r\n\r\ntypeof(\"40\")\r\n\r\n\r\n\r\nKüsuratlı ya da küsuratsız sayılar “double” veri tipindedirler.\r\n\r\n\r\ntypeof(3)\r\n\r\ntypeof(3.3)\r\n\r\n\r\n\r\nTRUE, FALSE ve NA “logical” veri tipindedirler. TRUE ve FALSE, T ve F\r\nşeklinde de yazılabilirler. Bu iki kullanım dışında bir kullanım\r\nyoktur.\r\n\r\n\r\ntypeof(TRUE)\r\n\r\ntypeof(FALSE)\r\n\r\ntypeof(NA)\r\n\r\n\r\n\r\nVeri dönüşümü yapmak için “as.numeric”, “as.character” ve\r\n“as.logical” gibi fonksiyonlar kullanılabilir. Bu fonksiyonlar sadece\r\nveriler dönüştürülebilir oldukları zaman işe yararlar. Yani 4 sayısı\r\ntırnak işareti ile “4” olduğu zaman character olurken, tırnaklar\r\nkalkınca numeric/double olarak kabul edilmektedir. Bu nedenle “4”, 4’e\r\ndönüştürülebilir. Ama “dört” yazısından tırnaklar kalksa da numeric bir\r\nifade alınamamaktadır. Bu nedenle dönüşüm yapılamaz ve sonuç olarak NA\r\nalınır.\r\n\r\n\r\ndort <- as.numeric(\"4\")\r\n\r\ntypeof(dort)\r\n\r\nx <- as.character(453)\r\n\r\ntypeof(x)\r\n\r\nas.numeric(\"dört\")\r\n\r\n\r\n\r\nLogical veriler numeric hale geldikleri zaman TRUE için 1, FALSE için\r\n0 çıktısı alınır. Karaktere dönüştürüldükleri zaman ise yazıya tırnak\r\neklenerek character olurlar. “FALSE” ya da “TRUE” gibi.\r\n\r\n\r\nas.numeric(FALSE)\r\n\r\nas.character(FALSE)\r\n\r\n\r\n\r\nVektör, DataFrame ve Liste\r\nVektörler\r\nBirden fazla değeri tek bir değişkende tutmak için kullanılan tek\r\nboyutlu değişkenlerden bir tanesi vektörlerdir ve c() fonksiyonu ile\r\noluşturulurlar.\r\n\r\n\r\nvektor <- c(1,2,3)\r\n\r\nvektor\r\n\r\n\r\n\r\nVektörlerin veri tipi içersindeki elemanların veri tipi ile\r\naynıdır.\r\n\r\n\r\ntypeof(vektor)\r\n\r\nvektor <- c(TRUE,FALSE,TRUE)\r\n\r\nvektor\r\n\r\ntypeof(vektor)\r\n\r\n\r\n\r\nEğer içerisindeki elemanların hepsi aynı veri tipinden değilse şu\r\nşekilde dönüşümler olur: Numeric/double ve logical veri tipleri, eğer\r\nvektör içinde bir character varsa character veri tipine dönüşürler.\r\nLogical veri tipi eğer vektör içinde bir numeric/double varsa\r\nnumeric/double veri tipine dönüşür.\r\n\r\n\r\nvektor <- c(\"4\", 1, 2)\r\n\r\ntypeof(vektor)\r\n\r\nvektor\r\n\r\nvektor <- c(TRUE,FALSE,5)\r\n\r\ntypeof(vektor)\r\n\r\nvektor\r\n\r\nvektor <- c(TRUE,FALSE,\"5\")\r\n\r\ntypeof(vektor)\r\n\r\nvektor\r\n\r\n\r\n\r\nBir veri tipini dönüşemeyeceği bir forma sokmaya çalışırsak “NA”\r\nsonucu alırız.\r\n\r\n\r\nvektor <- c(TRUE,FALSE,as.logical(\"5\"))\r\n\r\ntypeof(vektor)\r\n\r\nvektor\r\n\r\n\r\n\r\nDataframe\r\nDataframeler tabular veriyi tanımlamak için kullanılırlar ve satır ve\r\nsütunlardan oluşurlar. Bir dataframe oluşturmak için data.frame()\r\nfonksiyonu kullanılır. Aşağıdaki örnekte olduğu gibi sütun isimleri\r\nyazılarak, sütunları oluşturan vektörler bu isimlere atanır.\r\n\r\n\r\nisim <- c(\"ahmet\", \"selin\", \"hüseyin\", \"ayşe\")\r\n\r\ndf <- data.frame(isimler = isim, notlar = c(30,25,15,40))\r\n\r\ndf\r\n\r\n\r\n\r\nHer bir sütunun içerisindeki vektörün tipi yukarıda anlatılan vektör\r\ntipi kuralları içerisinde belirlenir. Mesela bir character bulunan\r\nsütunlarda diğer tüm elemanlar sayı da olsa vektörün veri tipi,\r\ndolayısıyla kalan tüm elemanlar karaktere dönüşür. Ya da bir double\r\nverinin bulunduğu sütunlardaki logical veriler double’a dönüşür.\r\n\r\n\r\ndf2 <- data.frame(isimler = c(\"ahmet\", \"selin\", \"hüseyin\", \"ayşe\"), notlar = c(30,25,50,\"40\"))\r\n\r\ndf2\r\n\r\ndf3 <- data.frame(isimler = c(\"ahmet\", \"selin\", \"hüseyin\", \"ayşe\"), notlar = c(30,25,50,40), devamsılık = c(1,T,F,T))\r\n\r\ndf3\r\n\r\n\r\n\r\nListe ve Veri alt\r\nkümelerine ulaşım\r\nlist: Bir liste oluşturmak için kullanılan fonksiyon\r\n\r\n\r\nliste <- list(c(T,T,F,T), 4, \"ahmet\")\r\n\r\n\r\n\r\nListenin veri tipi “list” dir.\r\n\r\n\r\ntypeof(liste)\r\n\r\n\r\n\r\nListe ve vektörlerin elemanlarına ulaşmak için köşeli parantezler\r\n“[]” kullanılır. Aşağıdaki ilk satırdaki kod listenin ikinci elemanına\r\nulaşmaktadır. İkinci satırdaki kod ise vektörün ilk elemanına\r\nulaşmaktadır.\r\n\r\n\r\nliste[2]\r\n\r\nvektor[1]\r\n\r\n\r\n\r\nTek köşeli parantez “[]” ilk elemana ulaşmakla birlikte, vektöre\r\nulaşamaz. Vektöre ulaşmak için iki köşeli parantez “[[]]” kullanmak\r\ngerekir.\r\n\r\n\r\nilk_eleman <- liste[1]\r\n\r\ntypeof(ilk_eleman)\r\n\r\nilk_eleman <- liste[[1]]\r\n\r\ntypeof(ilk_eleman)\r\n\r\n\r\n\r\nKöşeli parantezlerle dataframe’lerin sütunlarına da ulaşılabilir. Tek\r\nköşeli parantez kullanıldığı zaman görsel çıktı olarak sütun kod\r\nbloğunun altında gözükür. Veri tipi olarak ise “list” tipindedir.\r\n\r\n\r\ndf3[\"isimler\"]\r\n\r\ntypeof(df3[\"isimler\"])\r\n\r\ntypeof(df$isimler)\r\n\r\n\r\n\r\nİki köşeli parantez kullanıldığı zaman ise sütunu oluşturan vektöre\r\nulaşılabilir.\r\n\r\n\r\ndf3[[\"isimler\"]]\r\n\r\ntypeof(df3[[\"isimler\"]])\r\n\r\n\r\n\r\nKöşeli parantezler yerine dolar işareti kullanarak da sütunu\r\noluşturan vektöre ulaşmak mümkündür.\r\n\r\n\r\ndf3$isimler\r\n\r\ndf3$isimler[1:3]\r\n\r\n\r\n\r\n%>%\r\nVeri okuma ve yazma\r\nread.csv: Bir veri dosyasını r ortamına aktarabilmek için\r\nkullanılacak fonksiyon\r\n\r\n\r\ndf_iq <- read.csv(\"./data/student_clustering.csv\")\r\n\r\n\r\n\r\nmax: Bir vektördeki maksimum sayıyı bulan fonksiyon\r\n\r\n\r\nmax(df_iq$cgpa)\r\n\r\n\r\n\r\nmin: Bir vektördeki minimum sayıyı bulan fonksiyon\r\n\r\n\r\nmin(df_iq$iq)\r\n\r\n\r\n\r\nİki sütunu toplayıp tek bir sütuna yazmak için aşağıdaki ifade\r\nyazılabilir.\r\n\r\n\r\ndf_iq$toplam <- df_iq$cgpa + df_iq$iq\r\n\r\n\r\n\r\nwrite.csv: Bir dataframe’i bir dosya olarak kaydetmek için\r\nkullanılacak fonksiyon\r\n\r\n\r\nwrite.csv(df_iq, \"student_clustering_revised.csv\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-05-18T21:33:41+03:00",
    "input_file": {}
  }
]
